# Default values for helm-version-checker.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

replicaCount: 1

image:
  repository: mogensen/helm-version-checker
  pullPolicy: IfNotPresent
  # Overrides the image tag whose default is the chart appVersion.
  # tag: ""

imagePullSecrets: []
nameOverride: ""
fullnameOverride: ""

serviceAccount:
  # Specifies whether a service account should be created
  create: true
  # Annotations to add to the service account
  annotations: {}
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: ""

## Monitoring
livenessProbe:
  enabled: true
  httpGet:
    path: /
    port: 8081
  initialDelaySeconds: 2
  periodSeconds: 3

readinessProbe:
  enabled: true
  httpGet:
    path: /
    port: 8081
  initialDelaySeconds: 2
  periodSeconds: 3

serviceMonitor:
  enabled: false
  additionalLabels: {}

grafanaDashboard:
  enabled: false

podAnnotations:
  prometheus.io/path: /metrics
  prometheus.io/port: "8080"
  prometheus.io/scrape: "true"
  enable.helm-version-checker.io/helm-version-checker: "true"
  # If you want apparmor security
  # container.apparmor.security.beta.kubernetes.io/helm-version-checker: runtime/default

podSecurityContext:
  fsGroup: 35992

securityContext:
  privileged: false
  capabilities:
    drop:
    - ALL
  readOnlyRootFilesystem: true
  runAsNonRoot: true
  runAsUser: 35992
  allowPrivilegeEscalation: false

service:
  type: ClusterIP
  port: 8080

uiService:
  type: ClusterIP
  port: 8081

ingress:
  enabled: false
  annotations: {}
    # kubernetes.io/ingress.class: nginx
    # kubernetes.io/tls-acme: "true"
  hosts:
    - host: helm-version-checker.local
      paths:
      - path: /
        backend:
          serviceName: helm-version-checker.local
          servicePort: 8081
  tls: []
  #  - secretName: chart-example-tls
  #    hosts:
  #      - helm-version-checker.local

resources: {}
  # limits:
  #   cpu: 100m
  #   memory: 128Mi
  # requests:
  #   cpu: 100m
  #   memory: 128Mi

autoscaling:
  enabled: false
  minReplicas: 1
  maxReplicas: 100
  targetCPUUtilizationPercentage: 80
  # targetMemoryUtilizationPercentage: 80

nodeSelector: {}

tolerations: []

affinity: {}
